[alias]
a = add
aa = add --all
ai = add --interactive
au = add --update

add-all = aa
add-interactive = ai
add-update = au

cm = commit

cfg = config
conf = cfg

cfgg = cfg --global
cfgl = cfg --local
cfgs = cfg --system
cfgls = cfg --list
cfglsg = cfgls --global
cfglsl = cfgls --local
cfglss = cfgls --system
cfgsetg = cfgg
cfgsetl = cfgl
cfgsets = cfgs
cfgunsetg = cfgg --unset
cfgunsetl = cfgl --unset
cfgunsets = cfgs --unset

confg = cfgg
confl = cfgl
confs = cfgs
confls = cfgls
conflsg = cfglsg
conflsl = cfglsl
conflss = cfglss
confsetg = cfgsetg
confsetl = cfgsetl
confsets = cfgsets
confunsetg = cfgunsetg
confunsetl = cfgunsetl
confunsets = cfgunsets

config-list = cfgls
config-list-global = cfglsg
config-list-local = cfglsl
config-list-system = cfglss

config-global = cfgg
config-local = cfgl
config-system = cfgs

config-unset-global = cfgunsetg
config-unset-local = cfgunsetl
config-unset-system = cfgunsets

setg = cfgsetg
setl = cfgsetl
sets = cfgsets

unsetg = cfgunsetg
unsetl = cfgunsetl
unsets = cfgunsets

psh = push
pshup = psh --set-upstream

pushup = pshup
push-upstream = pshup

# rec = --recurse-submodules

pll = pull --recurse-submodules

# cln = clone --recurse-submodules

# View abbreviated SHA, description, and history graph of the latest 20 commits.
l = log --pretty=oneline -n 20 --graph --abbrev-commit

# View the current working tree status using the short format.
s = status -s

# Show the diff between the latest commit and the current state.
d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

# `git di $number` shows the diff between the state `$number` revisions ago and the current state.
di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

# Pull in remote changes for the current repository and all its submodules.

# Clone a repository including all submodules.
c = clone --recursive

# Commit all changes.
ca = !git add -A && git commit -av

# Switch to a branch, creating it if necessary.
go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

# Show verbose output about tags, branches or remotes
tags = tag -l
branches = branch --all
remotes = remote --verbose

# List aliases.
aliases = config --get-regexp alias

# Amend the currently staged files to the latest commit.
amend = commit --amend --reuse-message=HEAD

# Credit an author on the latest commit.
credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

# Interactive rebase with the given number of latest commits.
reb = "!r() { git rebase -i HEAD~$1; }; r"

# Remove the old tag with this name and tag the latest commit with it.
retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

# Find branches containing commit
fb = "!f() { git branch -a --contains $1; }; f"

# Find tags containing commit
ft = "!f() { git describe --always --contains $1; }; f"

# Find commits by source code
fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

# Find commits by commit message
fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

# Remove branches that have already been merged with main.
# a.k.a. ‘delete merged’
dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

# List contributors with number of commits.
contributors = shortlog --summary --numbered

# Show the user email for the current repository.
whoami = config user.email
[core]
# excludesfile = ~/.gitignore
# attributesfile = ~/.gitattributes
editor = vim

[color]
# Use colors in Git commands that are capable of colored output when
# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
ui = auto

[color "branch"]
current = yellow reverse
local = yellow
remote = green

[color "diff"]
meta = yellow bold
frag = magenta bold # line info
old = red           # deletions
new = green         # additions

[color "status"]
added = yellow
changed = green
untracked = cyan

[commit]
gpgsign = true

[diff]
# Detect copies as well as renames.
renames = copies

[diff "bin"]
# Use `hexdump` to diff binary files.
textconv = hexdump -v -C

[help]
# autocorrect = 1

[filter "lfs"]
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true

[merge]
log = true

[push]
# # https://git-scm.com/docs/git-config#git-config-pushdefault
# default = simple
# # Make `git push` push relevant annotated tags when pushing branches out.
# followTags = true

[url "git@github.com:"]
insteadOf = "gh:"
pushInsteadOf = "github:"
pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
insteadOf = "github:"

[url "git@gist.github.com:"]
insteadOf = "gst:"
pushInsteadOf = "gist:"
pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
insteadOf = "gist:"

[init]
defaultBranch = main

[user]
email =
name =
signingkey =
